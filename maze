#!/usr/bin/env bash
#/ Maze Game (in Bash)
#/
#/ You wake up in a corridor. There are no lights, but you are able to see
#/ because of a flashlight on the floor. You look around and find a marker, a
#/ small notebook, but that's it. Everything you normally take with is gone.
#/ Your memories are all jumbled and you don't recall how you got here.
#/ When opening the notebook, you find this written on the first page.
#/
#/    Find your way out.
#/    Good luck.
#/
#/ You look around. It's a very scary, dark, silent maze. You start to draw
#/ a map of the explored area.
#/
#/
#/ Use arrow keys, wasd, or hjkl to move. Press Q or escape to exit. M will
#/ bring up a map of where you have been.
#/
#/ Options:
#/     --width=X    Set the maze width to X, default 20.
#/     --height=Y   Set the maze height to Y, default 10.
#/     --seed=S     Set the random seed to this number.
#/     --help       Show this amazing help!
#/
#/ Don't set too large of an X and Y. This is written entirely in Bash, which
#/ is not known for blazing speed.

# Maze board array members
# [0] Width of board, in cells.
# [1] Height of board, in cells.
# [2] Board data, stored as a large string.
# [3] Starting X
# [4] Starting Y
# [5] Ending X
# [6] Ending Y

# Position array
# [0] X position, in cells
# [1] Y position, in cells
# [2] Direction facing (0=North, 1=East, 2=South, 3=West

# Disable warning about escaping a single quote
# shellcheck disable=SC1003

# shellcheck disable=SC1091
. bpm
bpm::include ansi
bpm::include arg
bpm::include array
bpm::include assign
bpm::include readkey

# Pick a spot in the maze near the edge as a start.
# Dig tunnels all over.
#
# $1 - Destination variable name for the board array.
# $2 - Board X (width in cells)
# $3 - Board Y (height in cells)
# $4 - Board data
maze::carvePaths() {
    local board boardX boardY center coords coordX coordY delta lastX lastY leftToCheck minX minY rowSize startX startY validPaths

    boardX=$2
    boardY=$3
    board=$4

    rowSize=$((boardX * 2 + 1))

    case "$((RANDOM % 4))" in
        0)
            startX=$((RANDOM % boardX))
            startY=0
            ;;

        1)
            startX=$((boardX - 1))
            startY=$((RANDOM % boardY))
            ;;

        2)
            startX=$((RANDOM % boardX))
            startY=$((boardY - 1))
            ;;

        3)
            startX=0
            startY=$((RANDOM % boardY))
            ;;
    esac

    leftToCheck=("$startX,$startY")
    minX=$((boardX - 1))
    minY=$((boardY - 1))

    while [[ "${#leftToCheck[@]}" -gt 0 ]]; do
        random=$((RANDOM % ${#leftToCheck[@]}))
        coords=${leftToCheck[random]}
        coordX=${coords%,*}
        coordY=${coords#*,}
        leftToCheck=("${leftToCheck[@]:0:random}" "${leftToCheck[@]:random + 1}")
        validPaths=()
        center=$((coordY * rowSize * 2 + rowSize + coordX * 2 + 1))

        if [[ $coordX != 0 ]] && maze::isValidPath "$center" "$rowSize" "-1" "$board"; then
            validPaths[${#validPaths[@]}]="-1,0"
        fi

        if [[ $coordX != "$minX" ]] && maze::isValidPath "$center" "$rowSize" "1" "$board"; then
            validPaths[${#validPaths[@]}]="1,0"
        fi

        if [[ $coordY != 0 ]] && maze::isValidPath "$center" "$rowSize" "-$rowSize" "$board"; then
            validPaths[${#validPaths[@]}]="0,-1"
        fi

        if [[ $coordY != "$minY" ]] && maze::isValidPath "$center" "$rowSize" "$rowSize" "$board"; then
            validPaths[${#validPaths[@]}]="0,1"
        fi

        if [[ "${#validPaths[@]}" != 0 ]]; then
            if [[ "${#validPaths[@]}" != 1 ]]; then
                # If there's other options, put this back in the list for later processing
                leftToCheck[${#leftToCheck[@]}]=$coords
            fi

            random=$((RANDOM % ${#validPaths[@]}))
            delta=${validPaths[random]}
            center=$((center + ${delta#*,} * rowSize + ${delta%,*}))
            board=${board:0:center}' '${board:center + 1}
            lastX=$((coordX + ${delta%,*}))
            lastY=$((coordY + ${delta#*,}))
            leftToCheck[${#leftToCheck[@]}]=$lastX,$lastY
        fi
    done

    local "$1" && assign::array "$1" "$boardX" "$boardY" "$board" "$startX" "$startY" "$lastX" "$lastY"
}


# See if the player made their way to the exit.
#
# $1 - Exit coords "X,Y" in cells
# $2 - Number of moves.
# $3-$5 - Player data (x, y, direction)
#
# Returns true if the user found the exit.
maze::checkForExit() {
    if [[ "$3,$4" == "$1" ]]; then
        echo ""
        echo "Congratulations! You found your way out in $2 moves."

        return 0
    fi

    return 1
}


# Copy an area from the board to the map
#
# $1 - Destination variable
# $2 - Position X
# $3 - Position Y
# $4 - Map data
# $5 - Board X
# $6 - Board data
maze::copyMap() {
    local map index rowSize

    map=$4
    rowSize=$((1 + $5 * 2))

    # Start with top left corner diagonally adjacent to the player
    index=$(($3 * rowSize * 2 + $2 * 2))
    map="${map:0:index}${6:index:3}${map:index + 3}"
    index=$((index + rowSize))
    map="${map:0:index}${6:index:3}${map:index + 3}"
    index=$((index + rowSize))
    map="${map:0:index}${6:index:3}${map:index + 3}"

    local "$1" && assign::value "$1" "$map"
}


# Determines if it is acceptable to make a path connecting two cells.
#
# $1 - Index in the board data for the cell where we start
# $2 - The computed size of one row
# $3 - The amount of change in X
# $4 - The amount of change in Y
# $5 - Board data
#
# Returns true (0) when these two cells can be connected. Any other value
# indicates they should not be connected.
maze::isValidPath() {
    local centerIndex delta index rowSize

    centerIndex=$1
    rowSize=$2
    delta=$3
    board=$4
    shift 4

    # Move to the wall
    index=$((centerIndex + delta))

    if [[ "${board:index:1}" == " " ]]; then
        # Already a path in this direction
        return 1
    fi

    # Move to the middle of the tile we want to check
    index=$((index + delta))

    if [[ "${board:index - 1:1}${board:index + 1:1}${board:index - rowSize:1}${board:index + rowSize:1}" == *" "* ]]; then
        # Adjacent cell is already connected
        return 1
    fi

    return 0
}


# Look around from a specific cell.
#
# $1 - Destination variable name to get a string.
# $2 - Position X in cells.
# $3 - Postiion Y in cells.
# $4 - Direction to look (0=north, 1=east, 2=south, 3=west)
# $5 - Board width in cells.
# $6 - Board data.
#
# Provides a string with three characters - left wall, forward wall, right
# wall. Walls are replaced with X.
maze::lookAround() {
    local board e index n rowSize s view w x y

    x=$2
    y=$3
    rowSize=$((1 + $5 * 2))
    board=$6
    index=$((rowSize + y * rowSize * 2 + x * 2 + 1))
    n=${board:index - rowSize:1}
    s=${board:index + rowSize:1}
    w=${board:index - 1:1}
    e=${board:index + 1:1}

    case "$4" in
        0)
            view="$w$n$e"
            ;;

        1)
            view="$n$e$s"
            ;;

        2)
            view="$e$s$w"
            ;;

        3)
            view="$s$w$n"
            ;;
    esac

    view=${view//|/X}
    view=${view//-/X}

    local "$1" && assign::value "$1" "$view"
}


# Determine what's on the left and right sides of the view and if we end at the
# exit.
#
# $1 - Destination variable for the left and right walls, "end is exit" flag,
#      and the map.
# $2 - The map that we are building from board data.
# $3-$5 - The positional data.
# $6-$@ - The board data.
#
# The left and right walls have the nearest wall as the first character and as
# you look farther, that increases the index of the letter in the string.
maze::lookDownCorridor() {
    local deltaX deltaY endAtExit left posX posY right view

    case "$5" in
        0)
            deltaX=0
            deltaY=-1
            ;;

        1)
            deltaX=1
            deltaY=0
            ;;

        2)
            deltaX=0
            deltaY=1
            ;;

        3)
            deltaX=-1
            deltaY=0
            ;;
    esac

    left=""
    right=""
    view="? ?"
    posX="$3"
    posY="$4"
    endAtExit=false
    map="$2"

    while [[ "${view:1:1}" == " " ]] && [[ "${#left}" -lt 5 ]]; do
        if [[ "$posX" == "${11}" ]] && [[ "$posY" == "${12}" ]]; then
            endAtExit=true
        fi

        maze::lookAround view "$posX" "$posY" "$5" "$6" "$8"
        maze::copyMap map "$posX" "$posY" "$map" "$6" "$8"
        left+=${view:0:1}
        right+=${view:2}
        posX=$((posX + deltaX))
        posY=$((posY + deltaY))
    done

    local "$1" && assign::array "$1" "$left" "$right" "$endAtExit" "$map"
}


# Creates a maze board array structure. Does not connect cells.
#
# $1 - Destination variable name for the board array
# $2 - Width of board in cells
# $3 - Height of board in cells
maze::makeMazeBoard() {
    local board cells divider rowsLeft x y

    x=$2
    y=$3
    rowsLeft=$3

    maze::makeMazeLine divider "$x" "+" "-+"
    maze::makeMazeLine cells "$x" "|" " |"
    board="$divider"

    while [[ $rowsLeft -gt 0 ]]; do
        rowsLeft=$((rowsLeft - 1))
        board+="$cells$divider"
    done

    local "$1" && assign::array "$1" "$x" "$y" "$board"
}


# Creates a single line of a maze board.
#
# $1 - Destination variable name.
# $2 - Length of line in cells.
# $3 - Starting string for the line.
# $4 - String to append for each cell.
maze::makeMazeLine() {
    local len line

    len=$2
    line=$3

    while [[ $len -gt 0 ]]; do
        len=$((len - 1))
        line+=$4
    done

    local "$1" && assign::value "$1" "$line"
}


# Creates a maze board array, complete with tunnels, the start point and end
# point.
#
# $1 - Destination variable name for the board data.
# $2 - Width of board in cells.
# $3 - Height of board in cells.
maze::makeMaze() {
    local boardData
    # local result startPos

    # Width and height in the number of cells
    maze::makeMazeBoard boardData "$2" "$3"

    # Make corridors
    maze::carvePaths boardData "${boardData[@]}"

    local "$1" && assign::array "$1" "${boardData[@]}"
}


# Attempt to move the player in the indicated direction.
#
# $1 - Destination variable name for the position data.
# $2 - Move direction, either 1 or -1
# $3-$5 - Position data
# $6-$@ - Board data
maze::move() {
    local board boardX index moveX moveY playerDir playerX playerY rowSize stepDir target

    target=$1
    stepDir=$2
    playerX=$3
    playerY=$4
    playerDir=$5
    boardX=$6
    board=$8
    rowSize=$((boardX * 2 + 1))
    index=$((rowSize + playerY * rowSize * 2 + playerX * 2 + 1))

    case "$playerDir" in
        0)
            moveX=0
            moveY=$((- stepDir))
            ;;

        1)
            moveX=$stepDir
            moveY=0
            ;;

        2)
            moveX=0
            moveY=$stepDir
            ;;

        3)
            moveX=$((- stepDir))
            moveY=0
            ;;
    esac

    if [[ "${board:index + rowSize * moveY + moveX:1}" != " " ]]; then
        return 1
    fi

    playerX=$((playerX + moveX))
    playerY=$((playerY + moveY))

    local "$target" && assign::array "$target" "$playerX" "$playerY" "$playerDir"
    return 0
}


# Reads a key from the keyboard and maps it to a code.
#
# $1 - Destination variable name for the code.
maze::readKey() {
    local code key

    readkey::code key

    case "$key" in
        # Arrow, vi, vi+shift, wasd, wasd+shift, numberPad
        ARROW_UP|k|K|w|W|8)
            code=FORWARD
            ;;

        ARROW_LEFT|h|H|a|A|4)
            code=LEFT
            ;;

        ARROW_RIGHT|l|L|d|D|6)
            code=RIGHT
            ;;

        ARROW_DOWN|j|J|s|S|5|2)
            code=BACK
            ;;

        "?")
            code=HELP
            ;;

        ESCAPE|q|Q|x|X|$'\x18')
            code=EXIT
            ;;

        m|M)
            code=MAP
            ;;

        *)
            code=UNKNOWN
            ;;
    esac

    local "$1" && assign::value "$1" "$code"
}


# Sets the initial position for the player
#
# $1 - Destination variable name for the position data array.
# $2-$@ - The board information
maze::setInitialPosition() {
    local board boardX boardY dir directions index offset offsetList random rowSize spot startX startY

    boardX=$2
    boardY=$3
    board=$4
    startX=$5
    startY=$6
    rowSize=$((1 + boardX * 2))
    index=$((rowSize + startY * 2 * rowSize + 1 + startX * 2))
    directions=0123

    while true; do
        random=$((RANDOM % ${#directions}))
        dir=${directions:random:1}
        offsetList=("-$rowSize" 1 "$rowSize" -1)
        offset=${offsetList[dir]}
        spot=${board:index + offset:1}

        if [[ "$spot" == " " ]]; then
            local "$1" && assign::array "$1" "$startX" "$startY" "$dir"
            return
        fi

        directions="${directions:0:random}${directions:random + 1}"
    done
}


# Display a maze board.
#
# $1-$3 - The position array
# $4 - Board width
# $5 - Board data
maze::showBoardData() {
    local board line lines marker rowSize x y

    x=$4
    board=$5
    rowSize=$((2 * x + 1))
    lines=()

    while [[ -n "$board" ]]; do
        lines[${#lines[@]}]=${board:0:rowSize}
        board=${board:rowSize}
    done

    # Position array
    marker="^>v<"
    marker=${marker:$3:1}
    y=$((1 + $2 * 2))
    lines[$y]="${lines[y]:0:1 + $1 * 2}$(ansi --no-newline --bg-blue --yellow --bold "$marker")${lines[y]:2 + $1 * 2}"

    for line in "${lines[@]}"; do
        echo "$line"
    done
}


# Display the in-maze view
#
# $1 - Destination variable for updated map.
# $2 - Map data.
# $3-$5 - The positional data
# $6-$@ - The board data
maze::showCorridor() {
    local corridor corridorInfo target

    target=$1
    shift
    maze::lookDownCorridor corridorInfo "$@"
    maze::viewCorridor corridor "${corridorInfo[@]}"

    for line in "${corridor[@]}"; do
        echo "$line"
    done

    local "$target" && assign::value "$target" "${corridorInfo[3]}"
}


# Turns the character 90 degrees
#
# $1 - Destination variable for the new position
# $2 - Turn direction, -1 is left and 1 is right
# $3-$@ - Position array elements
maze::turn() {
    local dir

    dir=$(($5 + $2))

    case "$dir" in
        -1)
            dir=3
            ;;
        4)
            dir=0
            ;;
    esac

    local "$1" && assign::array "$1" "$3" "$4" "$dir"
}


# Build the 3D view.
#
# $1 - Destination variable for the corridor array of strings
# $2 - Walls on left side until center is blocked
# $3 - Walls on right side until center is blocked
# $4 - true if we end at the exit, false otherwise
maze::viewCorridor() {
    local a b c d e f g h i j l1 l2 l3 l4 l5 reset

    l1=$(ansi --bold --color=255 --bg-black --no-restore)
    l2=$(ansi --bold --color=250 --bg-black --no-restore)
    l3=$(ansi --color=245 --bg-black --no-restore)
    l4=$(ansi --color=240 --bg-black --no-restore)
    l5=$(ansi --color=235 --bg-black --no-restore)
    reset=$(ansi --reset-color)

    a=$l1
    b=$l1
    c=$l1
    d=$l1
    e=$l1
    f=$l1
    g=$l1
    h=$l1
    i=$l1
    j=$l1

    case "${2:0:1}" in
        " ")
            a+='_'
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+='_'
            j+=' '
            ;;

        "X")
            a+='\'
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+='/'
            ;;
    esac

    case "${2:0:2}" in
        "XX")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X "|" X"|"  ")
            a+=' '
            b+='|'
            c+='|'
            d+='|'
            e+='|'
            f+='|'
            g+='|'
            h+='|'
            i+='|'
            j+=' '
            ;;

        "X")
            a+=' _______________'
            b+='|               '
            c+='|               '
            d+='|               '
            e+='|               '
            f+='|               '
            g+='|               '
            h+='|               '
            i+='|_______________'
            j+='                '
            ;;

        " ")
            a+='________________'
            b+='                '
            c+='                '
            d+='                '
            e+='                '
            f+='                '
            g+='                '
            h+='                '
            i+='________________'
            j+='                '
            ;;
    esac

    a+=$l2
    b+=$l2
    c+=$l2
    d+=$l2
    e+=$l2
    f+=$l2
    g+=$l2
    h+=$l2
    i+=$l2
    j+=$l2

    case "${2:1:1}" in
        " ")
            a+=' '
            b+='_'
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+='_'
            i+=' '
            j+=' '
            ;;

        "X")
            a+=' '
            b+='\'
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+='/'
            j+=' '
            ;;
    esac

    case "${2:1:2}" in
        "XX")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X "|" X"|"  ")
            a+=' '
            b+=' '
            c+='|'
            d+='|'
            e+='|'
            f+='|'
            g+='|'
            h+='|'
            i+=' '
            j+=' '
            ;;

        "X")
            if [[ "$4" == true ]]; then
                a+='    |---|   '
                b+=' ___|   |___'
                c+='|   |---|   '
                d+='|   |   |   '
                e+='|   |---|   '
                f+='|   |   |   '
                g+='|   |---|   '
                h+='|___|   |___'
                i+='    |---|   '
                j+='            '
            else
                a+='            '
                b+=' ___________'
                c+='|           '
                d+='|           '
                e+='|           '
                f+='|           '
                g+='|           '
                h+='|___________'
                i+='            '
                j+='            '
            fi
            ;;

        " ")
            a+='            '
            b+='____________'
            c+='            '
            d+='            '
            e+='            '
            f+='            '
            g+='            '
            h+='____________'
            i+='            '
            j+='            '
            ;;
    esac

    a+=$l3
    b+=$l3
    c+=$l3
    d+=$l3
    e+=$l3
    f+=$l3
    g+=$l3
    h+=$l3
    i+=$l3
    j+=$l3

    case "${2:2:1}" in
        " ")
            a+=' '
            b+=' '
            c+='_'
            d+=' '
            e+=' '
            f+=' '
            g+='_'
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X")
            a+=' '
            b+=' '
            c+='\'
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+='/'
            i+=' '
            j+=' '
            ;;
    esac

    case "${2:2:2}" in
        "XX")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X "|" X"|"  ")
            a+=' '
            b+=' '
            c+=' '
            d+='|'
            e+='|'
            f+='|'
            g+='|'
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X")
            if [[ "$4" == true ]]; then
                a+='        '
                b+='        '
                c+=' __|-|__'
                d+='|  |-|  '
                e+='|  |-|  '
                f+='|  |-|  '
                g+='|__|-|__'
                h+='        '
                i+='        '
                j+='        '
            else
                a+='        '
                b+='        '
                c+=' _______'
                d+='|       '
                e+='|       '
                f+='|       '
                g+='|_______'
                h+='        '
                i+='        '
                j+='        '
            fi
            ;;

        " ")
            a+='        '
            b+='        '
            c+='________'
            d+='        '
            e+='        '
            f+='        '
            g+='________'
            h+='        '
            i+='        '
            j+='        '
            ;;
    esac

    a+=$l4
    b+=$l4
    c+=$l4
    d+=$l4
    e+=$l4
    f+=$l4
    g+=$l4
    h+=$l4
    i+=$l4
    j+=$l4

    case "${2:3:1}" in
        " ")
            a+=' '
            b+=' '
            c+=' '
            d+='_'
            e+=' '
            f+='_'
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X")
            a+=' '
            b+=' '
            c+=' '
            d+='\'
            e+=' '
            f+=' '
            g+='/'
            h+=' '
            i+=' '
            j+=' '
            ;;
    esac

    case "${2:3:2}" in
        " X"|"  ")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+='|'
            f+='|'
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "XX"|"X ")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X")
            if [[ "$4" == true ]]; then
                a+='    '
                b+='    '
                c+='    '
                d+=' _#_'
                e+='| # '
                f+='|_#_'
                g+='    '
                h+='    '
                i+='    '
                j+='    '
            else
                a+='    '
                b+='    '
                c+='    '
                d+=' ___'
                e+='|   '
                f+='|___'
                g+='    '
                h+='    '
                i+='    '
                j+='    '
            fi
            ;;

        " ")
            a+='    '
            b+='    '
            c+='    '
            d+='____'
            e+='    '
            f+='____'
            g+='    '
            h+='    '
            i+='    '
            j+='    '
            ;;
    esac

    a+=$l5
    b+=$l5
    c+=$l5
    d+=$l5
    e+=$l5
    f+=$l5
    g+=$l5
    h+=$l5
    i+=$l5
    j+=$l5

    case "${2:4:1}" in
        "X"|" ")
            if [[ "$4" == true ]]; then
                a+='  '
                b+='  '
                c+='  '
                d+='  '
                e+='\+'
                f+='/+'
                g+='  '
                h+='  '
                i+='  '
                j+='  '
            else
                a+='  '
                b+='  '
                c+='  '
                d+='  '
                e+='\ '
                f+='/ '
                g+='  '
                h+='  '
                i+='  '
                j+='  '
            fi
            ;;
    esac

    case "${3:4:1}" in
        " "|"X")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+='/'
            f+='\'
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;
    esac

    a+=$l4
    b+=$l4
    c+=$l4
    d+=$l4
    e+=$l4
    f+=$l4
    g+=$l4
    h+=$l4
    i+=$l4
    j+=$l4

    case "${3:3:2}" in
        "XX"|"X ")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        " X"|"  "|"X")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+='|'
            f+='|'
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        " ")
            a+=' '
            b+=' '
            c+=' '
            d+='_'
            e+=' '
            f+='_'
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;
    esac

    case "${3:3:1}" in
        " ")
            a+=' '
            b+=' '
            c+=' '
            d+='_'
            e+=' '
            f+='_'
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X")
            a+=' '
            b+=' '
            c+=' '
            d+='/'
            e+=' '
            f+=' '
            g+='\'
            h+=' '
            i+=' '
            j+=' '
            ;;
    esac

    a+=$l3
    b+=$l3
    c+=$l3
    d+=$l3
    e+=$l3
    f+=$l3
    g+=$l3
    h+=$l3
    i+=$l3
    j+=$l3

    case "${3:2:2}" in
        "XX")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X "|" X"|"  "|"X")
            a+=' '
            b+=' '
            c+=' '
            d+='|'
            e+='|'
            f+='|'
            g+='|'
            h+=' '
            i+=' '
            j+=' '
            ;;

        " ")
            a+=' '
            b+=' '
            c+='_'
            d+=' '
            e+=' '
            f+=' '
            g+='_'
            h+=' '
            i+=' '
            j+=' '
            ;;
    esac

    case "${3:2:1}" in
        " ")
            a+=' '
            b+=' '
            c+='_'
            d+=' '
            e+=' '
            f+=' '
            g+='_'
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X")
            a+=' '
            b+=' '
            c+='/'
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+='\'
            i+=' '
            j+=' '
            ;;
    esac

    a+=$l2
    b+=$l2
    c+=$l2
    d+=$l2
    e+=$l2
    f+=$l2
    g+=$l2
    h+=$l2
    i+=$l2
    j+=$l2

    case "${3:1:2}" in
        "XX")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X "|" X"|"  "|"X")
            a+=' '
            b+=' '
            c+='|'
            d+='|'
            e+='|'
            f+='|'
            g+='|'
            h+='|'
            i+=' '
            j+=' '
            ;;

        " ")
            a+=' '
            b+='_'
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+='_'
            i+=' '
            j+=' '
            ;;
    esac

    case "${3:1:1}" in
        " ")
            a+=' '
            b+='_'
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+='_'
            i+=' '
            j+=' '
            ;;

        "X")
            a+=' '
            b+='/'
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+='\'
            j+=' '
            ;;
    esac

    a+=$l1
    b+=$l1
    c+=$l1
    d+=$l1
    e+=$l1
    f+=$l1
    g+=$l1
    h+=$l1
    i+=$l1
    j+=$l1

    case "${3:0:2}" in
        "XX")
            a+=' '
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+=' '
            ;;

        "X "|" X"|"  "|"X")
            a+=' '
            b+='|'
            c+='|'
            d+='|'
            e+='|'
            f+='|'
            g+='|'
            h+='|'
            i+='|'
            j+=' '
            ;;

        " ")
            a+='_'
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+='_'
            j+=' '
            ;;
    esac

    case "${3:0:1}" in
        " ")
            a+='_'
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+='_'
            j+=' '
            ;;

        "X")
            a+='/'
            b+=' '
            c+=' '
            d+=' '
            e+=' '
            f+=' '
            g+=' '
            h+=' '
            i+=' '
            j+='\'
            ;;
    esac

    j+=$reset

    local "$1" && assign::array "$1" "$a" "$b" "$c" "$d" "$e" "$f" "$g" "$h" "$i" "$j"
}


maze() {
    local board exitCoords help map moves position seed

    arg::getOption width --width "$@"
    arg::getOption height --height "$@"
    arg::getOption seed --seed "$@"
    arg::getOption help --help "$@"

    : "${width:=20}"
    : "${height:=10}"

    if [[ -n "$seed" ]]; then
        RANDOM=$seed
    fi

    if [[ -n "$help" ]]; then
        grep '^#/' "$0" | cut -b 4-

        return
    fi

    maze::makeMaze board "$width" "$height"
    map=${board[2]}
    map=${map//?/ }
    maze::setInitialPosition position "${board[@]}"

    maze::showCorridor map "$map" "${position[@]}" "${board[@]}"
    exitCoords="${board[5]},${board[6]}"
    moves=0

    while maze::readKey key; do
        case "$key" in
            FORWARD)
                maze::move position 1 "${position[@]}" "${board[@]}" && moves=$((moves + 1))
                maze::checkForExit "$exitCoords" "$moves" "${position[@]}" && return
                ansi::up 10
                ;;

            LEFT)
                ansi::up 10
                maze::turn position -1 "${position[@]}"
                ;;

            RIGHT)
                ansi::up 10
                maze::turn position 1 "${position[@]}"
                ;;

            BACK)
                maze::move position -1 "${position[@]}" "${board[@]}" && moves=$((moves + 1))
                maze::checkForExit "$exitCoords" "$moves" "${position[@]}" && return
                ansi::up 10
                ;;

            MAP)
                echo ""
                maze::showBoardData "${position[@]}" "${board[0]}" "$map"
                echo ""
                ;;

            HELP)
                ansi::up 10
                ansi::eraseDisplay 0
                echo ""
                echo "Navigate through the maze. Try to find the exit."
                echo ""
                echo "Up, W, K, 8 = Move forward."
                echo "Down, S, J, 5, 2 = Move backward."
                echo "Left, A, H, 4 = Turn left."
                echo "Right, D, L, 6 = Turn right."
                echo "Escape, Q, X = Leave game."
                echo "M = Show the map."
                echo ""
                ;;

            EXIT)
                echo ""
                echo "Thanks for playing!"

                return
                ;;

            UNKNOWN)
                ansi::up 10
                ansi::eraseDisplay 0
                echo ""
                echo "Sorry, I do not understand that command. Press ? for help."
                echo ""
                ;;
        esac

        maze::showCorridor map "$map" "${position[@]}" "${board[@]}"
    done
}


if ! bpm::isSourced; then
    # Disabling locale settings makes this marginally faster
    LC_ALL=C LANG=C maze "$@"
fi
